Microsoft (R) Macro Assembler Version 14.28.29910.0	    06/01/21 17:25:36
5Designing low level I/O procedures  (Proj6_rizar.asm	     Page 1 - 1


				TITLE Designing low level I/O procedures  (Proj6_rizar.asm)

				; Author: Ron Riza
				; Last Modified: 5/31/21
				; OSU email address: rizarD@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:       6          Due Date: 6/7/21
				; Description: This program contains procedures ReadVal, which converts an ascii string
				; entered by a user into a numerical value, and WriteVal, which convers a numerical value
				; into a string and displays it to a user. The main procedure prompts a user for 10 signed numbers,
				; converts them into integers, and then displays them along with their sum and average.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				;-------------------------
				; Name: mGetString
				; Prompts user to enter a string and reads it
				; Receives:
				; prompt = address of user prompt
				; bufferSize = value of maximum allowed size
				; bufferAddress = address of memory location for string to be stored
				; bytesEntered = address of memory location for string length to be stored
				;----------------------------
				mGetString MACRO prompt, bufferSize, bufferAddress, bytesEntered
					pushad

					mov  EDX, prompt
					call WriteString
					mov  EDX, bufferAddress
					mov  ECX, bufferSize
					call ReadString
					mov  EBX, bytesEntered				
					mov  [EBX], EAX

					popad
				ENDM

				;-----------------------------
				; Name: mDisplayString
				; Prints a string
				; Receives: stringLocation = address of string to be printed
				;-------------------------------
				mDisplayString MACRO stringLocation
					push EDX

					mov  EDX, stringLocation
					call WriteString

					pop  EDX
				ENDM



 = 00000010			MAXSIZE = 16									; 11 digits + 1 sign + 1 null + 3 leading zeros
 = 0000000A			NUM_OF_INPUTS = 10

 00000000			.data

 00000000 50 6C 65 61 73	userPrompt		BYTE   "Please enter a signed number (up to 15 characters and 3 leading 0s): ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 20 28
	   75 70 20 74 6F
	   20 31 35 20 63
	   68 61 72 61 63
	   74 65 72 73 20
	   61 6E 64 20 33
	   20 6C 65 61 64
	   69 6E 67 20 30
	   73 29 3A 20 00
 00000046 45 72 72 6F 72	inputError		BYTE   "Error: You did not enter an signed number or your number was too big.",13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 20 6F 72 20
	   79 6F 75 72 20
	   6E 75 6D 62 65
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 0D
	   0A 00
 0000008E 45 72 72 6F 72	zeroError		BYTE   "Error: You have entered more than 3 leading zeros.",13,10,0
	   3A 20 59 6F 75
	   20 68 61 76 65
	   20 65 6E 74 65
	   72 65 64 20 6D
	   6F 72 65 20 74
	   68 61 6E 20 33
	   20 6C 65 61 64
	   69 6E 67 20 7A
	   65 72 6F 73 2E
	   0D 0A 00
 000000C3 20 00			space			BYTE   " ",0
 000000C5 50 52 4F 47 52	introduction    BYTE   "PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures",13,10,"Written by: Ron Riza",13,10,13,10
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A 57 72 69
	   74 74 65 6E 20
	   62 79 3A 20 52
	   6F 6E 20 52 69
	   7A 61 0D 0A 0D
	   0A
 0000011B  50 6C 65 61 73					BYTE   "Please enter 10 signed decimal integers.",13,10,"Each number fit in a 32-bit register. Up to 15 characters and 3 leading 0s are allowed. After you have",13,10
	   65 20 65 6E 74
	   65 72 20 31 30
	   20 73 69 67 6E
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 2E
	   0D 0A 45 61 63
	   68 20 6E 75 6D
	   62 65 72 20 66
	   69 74 20 69 6E
	   20 61 20 33 32
	   2D 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   55 70 20 74 6F
	   20 31 35 20 63
	   68 61 72 61 63
	   74 65 72 73 20
	   61 6E 64 20 33
	   20 6C 65 61 64
	   69 6E 67 20 30
	   73 20 61 72 65
	   20 61 6C 6C 6F
	   77 65 64 2E 20
	   41 66 74 65 72
	   20 79 6F 75 20
	   68 61 76 65 0D
	   0A
 000001AD  65 6E 74 65 72					BYTE   "entered your numbers, I will display the numbers back to you, along with their sum and average.",13,10,13,10,0
	   65 64 20 79 6F
	   75 72 20 6E 75
	   6D 62 65 72 73
	   2C 20 49 20 77
	   69 6C 6C 20 64
	   69 73 70 6C 61
	   79 20 74 68 65
	   20 6E 75 6D 62
	   65 72 73 20 62
	   61 63 6B 20 74
	   6F 20 79 6F 75
	   2C 20 61 6C 6F
	   6E 67 20 77 69
	   74 68 20 74 68
	   65 69 72 20 73
	   75 6D 20 61 6E
	   64 20 61 76 65
	   72 61 67 65 2E
	   0D 0A 0D 0A 00
 00000211 59 6F 75 20 68	enteredString	BYTE   "You have entered the following numbers:",13,10,0
	   61 76 65 20 65
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 0000023B 54 68 65 20 73	sumString		BYTE   "The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000259 54 68 65 20 72	averageString	BYTE   "The rounded average is: ",0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 00000272 54 68 61 6E 6B	farewell		BYTE   "Thanks for playing!",0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00
 00000286  00000010 [		inputString  	BYTE   MAXSIZE DUP(?)			; buffer for input string
	    00
	   ]
 00000296 00000000		stringLen		DWORD  ?						; holds the length of string entered
 0000029A  0000000A [		inputArray		SDWORD NUM_OF_INPUTS DUP(?)		; array of user-entered numbeers
	    00000000
	   ]
 000002C2  00000010 [		outputString	BYTE   MAXSIZE DUP(?)			; string to be printed
	    00
	   ]
 000002D2  00000010 [		revString		BYTE   MAXSIZE DUP(?)			; reversed string (for computational purposes)
	    00
	   ]


 00000000			.code
 00000000			main PROC

					mDisplayString OFFSET introduction
 00000000  52		     1		push EDX
 00000001  BA 000000C5 R     1		mov  EDX, OFFSET introduction
 00000006  E8 00000000 E     1		call WriteString
 0000000B  5A		     1		pop  EDX

				; ----------------------------
				; repeatedly asks a user to enter a number,
				; converts the entered string into an integer,
				; and stores that number into an array
				;--------------------------------
 0000000C  BF 0000029A R		mov EDI, OFFSET inputArray					; sets destination to input array
 00000011  B9 0000000A			mov ECX, NUM_OF_INPUTS						; sets loop counter

 00000016			_inputLoop:
 00000016  68 0000008E R		push OFFSET zeroError
 0000001B  68 00000046 R		push OFFSET inputError
 00000020  57				push EDI
 00000021  68 00000296 R		push OFFSET stringLen
 00000026  68 00000286 R		push OFFSET inputString
 0000002B  6A 10			push MAXSIZE
 0000002D  68 00000000 R		push OFFSET userPrompt
 00000032  E8 000000BF			call ReadVal
 00000037  83 C7 04			add  EDI, 4									; moves to next element of array
 0000003A  E2 DA			LOOP _inputLOOP

 0000003C  E8 00000000 E		call Crlf

				;-----------------------
				; prints each number in the array
				;------------------------
					mDisplayString OFFSET enteredString
 00000041  52		     1		push EDX
 00000042  BA 00000211 R     1		mov  EDX, OFFSET enteredString
 00000047  E8 00000000 E     1		call WriteString
 0000004C  5A		     1		pop  EDX

 0000004D  BE 0000029A R		mov ESI, OFFSET inputArray					; sets source to input array
 00000052  B9 0000000A			mov ECX, NUM_OF_INPUTS						; sets loop counter

 00000057			_outputLoop:
 00000057  68 000002D2 R		push OFFSET revString
 0000005C  68 000002C2 R		push OFFSET outputString
 00000061  FF 36			push [ESI]
 00000063  E8 00000153			call WriteVal								; prints current element
					mDisplayString OFFSET space
 00000068  52		     1		push EDX
 00000069  BA 000000C3 R     1		mov  EDX, OFFSET space
 0000006E  E8 00000000 E     1		call WriteString
 00000073  5A		     1		pop  EDX
 00000074  83 C6 04			add  ESI, 4									; moves to next element of array
 00000077  E2 DE			LOOP _outputLoop
 00000079  E8 00000000 E		call Crlf

				;------------------------------
				; prints the sum of the numbers in the array
				;--------------------------------
					mDisplayString OFFSET sumString
 0000007E  52		     1		push EDX
 0000007F  BA 0000023B R     1		mov  EDX, OFFSET sumString
 00000084  E8 00000000 E     1		call WriteString
 00000089  5A		     1		pop  EDX

 0000008A  BE 0000029A R		mov ESI, OFFSET inputArray					; sets source to input array
 0000008F  B9 0000000A			mov ECX, NUM_OF_INPUTS						; sets loop counter
 00000094  B8 00000000			mov EAX, 0									; initializes the sum to 0

 00000099			_sumLoop:
 00000099  03 06			add  EAX, [ESI]								; adds current element to sum
 0000009B  83 C6 04			add  ESI, 4									; moves to next element
 0000009E  E2 F9			LOOP _sumLoop

 000000A0  68 000002D2 R		push OFFSET revString
 000000A5  68 000002C2 R		push OFFSET outputString
 000000AA  50				push EAX
 000000AB  E8 0000010B			call WriteVal								; prints total sum
 000000B0  E8 00000000 E		call Crlf

				;----------------------------
				; prints the truncated average (without fractional part)
				; of the numbers in the input array
				;---------------------------
					mDisplayString OFFSET averageString
 000000B5  52		     1		push EDX
 000000B6  BA 00000259 R     1		mov  EDX, OFFSET averageString
 000000BB  E8 00000000 E     1		call WriteString
 000000C0  5A		     1		pop  EDX
 000000C1  99				CDQ
 000000C2  BB 0000000A			mov  EBX, NUM_OF_INPUTS
 000000C7  F7 FB			IDIV EBX									; divide sum (still in EAX) by number of inputs

 000000C9  68 000002D2 R		push OFFSET revString
 000000CE  68 000002C2 R		push OFFSET outputString
 000000D3  50				push EAX									; EAX holds the average (without fractional part)
 000000D4  E8 000000E2			call WriteVal								; prints average)
 000000D9  E8 00000000 E		call Crlf
 000000DE  E8 00000000 E		call Crlf

					mDisplayString OFFSET farewell
 000000E3  52		     1		push EDX
 000000E4  BA 00000272 R     1		mov  EDX, OFFSET farewell
 000000E9  E8 00000000 E     1		call WriteString
 000000EE  5A		     1		pop  EDX

					Invoke ExitProcess,0	; exit to operating system
 000000EF  6A 00	   *	    push   +000000000h
 000000F1  E8 00000000 E   *	    call   ExitProcess
 000000F6			main ENDP

				; --------------------------------
				; Name: ReadVal
				; Asks a user to input a number, and converts the ascii characters into an SDWORD integer. 
				;Receives:
				;	[EBP+8]: address of user prompt string
				;	[EBP+12]: value of maximum allowed size
				;	[EBP+16]: address of input string buffer
				;	[EBP+20]: address of memory loction for string length to be stored
				;	[EBP+24]: address of memory location for number to be stored
				;	[EBP+28]: address of error message string
				;	[EBP+32]: address of leading zero error message string
				;Returns: number and string length stored in memory
				;-----------------------------------
 000000F6			ReadVal PROC
					LOCAL zeroCount:BYTE							; used to keep track of leading zeros
 000000F6  55		   *	    push   ebp
 000000F7  8B EC	   *	    mov    ebp, esp
 000000F9  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000000FC  60				pushad

 000000FD			_askAgain:
 000000FD  C6 45 FF 00			mov zeroCount, 0
					mGetString [EBP+8], [EBP+12], [EBP+16], [EBP+20]
 00000101  60		     1		pushad
 00000102  8B 55 08	     1		mov  EDX, [EBP+8]
 00000105  E8 00000000 E     1		call WriteString
 0000010A  8B 55 10	     1		mov  EDX, [EBP+16]
 0000010D  8B 4D 0C	     1		mov  ECX, [EBP+12]
 00000110  E8 00000000 E     1		call ReadString
 00000115  8B 5D 14	     1		mov  EBX, [EBP+20]				
 00000118  89 03	     1		mov  [EBX], EAX
 0000011A  61		     1		popad
 0000011B  8B 75 10			mov ESI, [EBP+16]								; source is address of string
 0000011E  8B 7D 18			mov EDI, [EBP+24]								; destination is address of integer
 00000121  8B 4D 14			mov ECX, [EBP+20]								; moves address of string length into ECX
 00000124  8B 09			mov ECX, [ECX]									; moves value of string length into ECX
 00000126  BB 00000000			mov EBX, 0										; EBX will hold the integer at the end of conversion
 0000012B  B8 00000000			mov EAX, 0										; clears EAX
					
				;-----------------------------
				; This conversion algorithm has 2 seperate loops:
				; one for positive numbers and one for negative numbers.
				; We determine which loop to use by looking at the first
				; character of the string. If no symbol was entered we
				; assume it is positive.
				;---------------------------------
 00000130  FC				CLD
 00000131  AC				LODSB

					; checks if first character is (-) or (+)
 00000132  3C 2D			cmp AL, 45								
 00000134  74 06			je  _negativeCheckLength						; if first element is (-) we must check the length
 00000136  3C 2B			cmp AL, 43
 00000138  74 09			je  _positiveCheckLength						; if first element is (+) we must check the length
 0000013A  EB 0E			jmp _positiveLoop								; if first element is not (-) or (+) we move on to positive loop

 0000013C			_negativeCheckLength:
 0000013C  83 F9 01			cmp ECX, 1
 0000013F  74 55			je  _invalid									; if first char is (-) and length is 1, number is invalid
 00000141  EB 4E			jmp _negativeNext								; otherwise, number is negative and we can move to next character

 00000143			_positiveCheckLength:
 00000143  83 F9 01			cmp ECX, 1
 00000146  74 4E			je  _invalid									; if first char is (+) and length is 1, number is invalid
 00000148  EB 21			jmp _positiveNext								; otherwise, number is positive and we can mvoe to next character

				; ---------------------
				; positive conversion loop in pseudocode:
				; EBX = 0
				; for char in string:
				;	if 48 <= char <= 57:
				;		EBX = 10 * EBX + (char-48)
				;---------------------------
 0000014A			_positiveLoop:
					; checks if char is a digit
 0000014A  3C 30			cmp Al, 48
 0000014C  7C 48			jl  _invalid									
 0000014E  3C 39			cmp AL, 57
 00000150  7F 44			jg  _invalid								
					
					; update EBX
 00000152  2C 30			sub  AL, 48										
 00000154  6B DB 0A			imul EBX, 10									
 00000157  70 3D			jo   _invalid									; if there is an overflow, entered number cannot fit in 32-bit register
 00000159  03 D8			add  EBX, EAX
 0000015B  70 39			jo   _invalid									; checks overflow again
 0000015D  83 FB 00			cmp  EBX, 0										; checks for leading zeros
 00000160  75 09			jne  _positiveNext
 00000162  FE 45 FF			inc  zeroCount
 00000165  80 7D FF 04			cmp  zeroCount, 4
 00000169  74 3A			je   _tooManyZeros								; if there are more than 3 leading zeros, jump to error

 0000016B			_positiveNext:
 0000016B  AC				LODSB											; moves to next char
 0000016C  E2 DC			LOOP _positiveLoop
 0000016E  EB 44			jmp  _end

				; ---------------------
				; negative conversion loop in pseudocode:
				; EBX = 0
				; for char in string:
				;	if 48 <= char <= 57:
				;		EBX = 10 * EBX - (char-48)
				;---------------------------
 00000170			_negativeLoop:
					; checks if char is a digit
 00000170  3C 30			cmp Al, 48
 00000172  7C 22			jl  _invalid
 00000174  3C 39			cmp AL, 57
 00000176  7F 1E			jg  _invalid

					; updates EBX
 00000178  2C 30			sub  AL, 48
 0000017A  6B DB 0A			imul EBX, 10
 0000017D  70 17			jo   _invalid								; if there is an overflow, entered number cannot fit in 32-bit register
 0000017F  2B D8			sub  EBX, EAX
 00000181  70 13			jo   _invalid								; check overflow again
 00000183  83 FB 00			cmp  EBX, 0
 00000186  75 09			jne  _negativeNext
 00000188  FE 45 FF			inc  zeroCount
 0000018B  80 7D FF 04			cmp  zeroCount, 4
 0000018F  74 14			je   _tooManyZeros

 00000191			_negativeNext:
 00000191  AC				LODSB										; moves to next char
 00000192  E2 DC			LOOP _negativeLoop
 00000194  EB 1E			jmp  _end

 00000196			_invalid:
					mDisplayString [EBP+28]						; error message is printed
 00000196  52		     1		push EDX
 00000197  8B 55 1C	     1		mov  EDX, [EBP+28]
 0000019A  E8 00000000 E     1		call WriteString
 0000019F  5A		     1		pop  EDX
 000001A0  E9 FFFFFF58			jmp _askAgain								; user is asked to enter another number

 000001A5			_toomanyZeros:
					mDisplayString [EBP+32]
 000001A5  52		     1		push EDX
 000001A6  8B 55 20	     1		mov  EDX, [EBP+32]
 000001A9  E8 00000000 E     1		call WriteString
 000001AE  5A		     1		pop  EDX
 000001AF  E9 FFFFFF49			jmp _askAgain

 000001B4			_end:
 000001B4  89 1F			mov [EDI], EBX								; moves the result into the memory address specified

 000001B6  61				popad
 000001B7  C9		   *	    leave  
 000001B8  C2 001C			RET 28
 000001BB			ReadVal ENDP

				;------------------------
				; Name: WriteVal
				; Converts and SDWORD integer into a string and prints it 
				; Receives:
				;	[EBP+8]: value of integer to be converted
				;	[EBP+12]: address output string
				;	[EBP+16]: address of reversed string (for computation purposes)
				;-------------------------
 000001BB			WriteVal PROC
 000001BB  55				push EBP
 000001BC  8B EC			mov  EBP, ESP
 000001BE  60				pushad

				;----------------------------
				; String is first written in reverse order. It is then
				; reversed for the final output string
				;-----------------------------------
 000001BF  8B 45 08			mov EAX, [EBP+8]							; moves integer into EAX
 000001C2  8B 7D 10			mov EDI, [EBP+16]							; destination is set to reversed string buffer
 000001C5  B9 00000000			mov ECX, 0									; ECX is used to keep track of string length

 000001CA  83 F8 00			cmp EAX, 0
 000001CD  7C 1D			jl  _negativeLoop							; if number is negative, we use the negative loop

				;----------------------------------
				; this conversion algorithm has 2 seperate loops:
				; one for positive numbers and one for negative numbers.
				; the positive loop will repeatedly divide the number by 10.
				; the remainder is the last current digit.  it then adds 48 to the remainder 
				; to get the ascii value of the digit. it then stores this value in the string.
				; ----------------------------------------------------

 000001CF			_positiveLoop:
 000001CF  99				CDQ
 000001D0  BB 0000000A			mov  EBX, 10
 000001D5  F7 FB			IDIV EBX									; divide by 10
 000001D7  83 C2 30			add  EDX, 48								; add 48 to remainder to convert to ascii
 000001DA  50				push EAX									
 000001DB  8A C2			mov  AL, DL									; moves the ascii value into the accumulator
 000001DD  AA				STOSB									    ; stores the ascii value in the string
 000001DE  58				pop  EAX
 000001DF  83 C1 01			add  ECX, 1									; increments the string length counter
 000001E2  83 F8 00			cmp  EAX, 0									
 000001E5  75 E8			jne  _positiveLoop

 000001E7  C6 07 00			mov  [EDI], BYTE PTR 0						; null terminate the string
 000001EA  EB 26			jmp  _reverse

				;------------------------------------
				; The negative loop behaves similarly to the 
				; positive loop, except after each division,
				; the remainder is negated (because if the dividend
				; is negative, IDIV will produce a negative remainder).
				;-----------------------------------------
 000001EC			_negativeLoop:
 000001EC  99				CDQ
 000001ED  BB 0000000A			mov  EBX, 10
 000001F2  F7 FB			IDIV EBX
 000001F4  F7 DA			NEG  EDX
 000001F6  83 C2 30			add  EDX, 48
 000001F9  50				push EAX									
 000001FA  8A C2			mov  AL, DL									
 000001FC  AA				STOSB									    
 000001FD  58				pop  EAX
 000001FE  83 C1 01			add  ECX, 1
 00000201  83 F8 00			cmp  EAX, 0
 00000204  75 E6			jne  _negativeLoop

 00000206  C6 07 2D			mov [EDI], BYTE PTR 45						; adds negative sign to the end of string
 00000209  83 C7 01			add EDI, 1
 0000020C  83 C1 01			add ECX, 1
 0000020F  C6 07 00			mov [EDI], BYTE PTR 0						; null terminate string

 00000212			_reverse:
 00000212  8B 75 10			mov ESI, [EBP+16]							; sets the source to the reversed string
 00000215  8B 7D 0C			mov EDI, [EBP+12]							; sets the destination to the output string
 00000218  03 F1			add ESI, ECX								
 0000021A  4E				dec ESI										; sets ESI to the last character in reversed string

 0000021B			_revLoop:
 0000021B  FD				STD											
 0000021C  AC				LODSB										
 0000021D  FC				CLD											
 0000021E  AA				STOSB										
 0000021F  E2 FA			LOOP _revLoop
 00000221  C6 07 00			mov [EDI], BYTE PTR 0						; null terminates string

					mDisplayString [EBP+12]						; prints string
 00000224  52		     1		push EDX
 00000225  8B 55 0C	     1		mov  EDX, [EBP+12]
 00000228  E8 00000000 E     1		call WriteString
 0000022D  5A		     1		pop  EDX

 0000022E  61				popad
 0000022F  5D				pop EBP
 00000230  C2 000C			RET 12

 00000233			WriteVal ENDP


				END main
Microsoft (R) Macro Assembler Version 14.28.29910.0	    06/01/21 17:25:36
5Designing low level I/O procedures  (Proj6_rizar.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002E2 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000233 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000F6 _TEXT	Length= 000000C5 Public STDCALL
  zeroCount  . . . . . . . . . .	Byte	 bp - 00000001
  _askAgain  . . . . . . . . . .	L Near	 000000FD _TEXT	
  _negativeCheckLength . . . . .	L Near	 0000013C _TEXT	
  _positiveCheckLength . . . . .	L Near	 00000143 _TEXT	
  _positiveLoop  . . . . . . . .	L Near	 0000014A _TEXT	
  _positiveNext  . . . . . . . .	L Near	 0000016B _TEXT	
  _negativeLoop  . . . . . . . .	L Near	 00000170 _TEXT	
  _negativeNext  . . . . . . . .	L Near	 00000191 _TEXT	
  _invalid . . . . . . . . . . .	L Near	 00000196 _TEXT	
  _toomanyZeros  . . . . . . . .	L Near	 000001A5 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000001B4 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001BB _TEXT	Length= 00000078 Public STDCALL
  _positiveLoop  . . . . . . . .	L Near	 000001CF _TEXT	
  _negativeLoop  . . . . . . . .	L Near	 000001EC _TEXT	
  _reverse . . . . . . . . . . .	L Near	 00000212 _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 0000021B _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000F6 Public STDCALL
  _inputLoop . . . . . . . . . .	L Near	 00000016 _TEXT	
  _outputLoop  . . . . . . . . .	L Near	 00000057 _TEXT	
  _sumLoop . . . . . . . . . . .	L Near	 00000099 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXSIZE  . . . . . . . . . . . .	Number	 00000010h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUM_OF_INPUTS  . . . . . . . . .	Number	 0000000Ah   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
averageString  . . . . . . . . .	Byte	 00000259 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enteredString  . . . . . . . . .	Byte	 00000211 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell . . . . . . . . . . . .	Byte	 00000272 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputArray . . . . . . . . . . .	DWord	 0000029A _DATA	
inputError . . . . . . . . . . .	Byte	 00000046 _DATA	
inputString  . . . . . . . . . .	Byte	 00000286 _DATA	
introduction . . . . . . . . . .	Byte	 000000C5 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
outputString . . . . . . . . . .	Byte	 000002C2 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
revString  . . . . . . . . . . .	Byte	 000002D2 _DATA	
space  . . . . . . . . . . . . .	Byte	 000000C3 _DATA	
stringLen  . . . . . . . . . . .	DWord	 00000296 _DATA	
sumString  . . . . . . . . . . .	Byte	 0000023B _DATA	
userPrompt . . . . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
zeroError  . . . . . . . . . . .	Byte	 0000008E _DATA	

	   0 Warnings
	   0 Errors
